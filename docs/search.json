[{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"load-and-process-rna-seq-data","dir":"Articles","previous_headings":"","what":"Load and process RNA-seq data","title":"Zenith gene set testing after dream analysis","text":"","code":"library(recount) library(variancePartition) library(edgeR) library(limma) library(zenith) library(ggplot2) library(EnrichmentBrowser) library(GSEABase) library(dplyr) library(kableExtra)  # For ENSEMBL id ENSG00000279457.4, return ENSG00000279457 trim_ensembl_ids = function(x){   gsub(\"(.*)\\\\.(.*)\", \"\\\\1\", x)  }"},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"load-rna-seq-data-and-metadata","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Load RNA-seq data and metadata","title":"Zenith gene set testing after dream analysis","text":"","code":"# Download GEUVADIS data from recount2 if( ! file.exists(\"ERP001942/rse_gene.Rdata\") ){   download_study('ERP001942') }  # Load the data load(file.path('ERP001942', 'rse_gene.Rdata'))  # scale counts rse <- scale_counts(rse_gene)  # get count data geneCounts = assay(rse)  # read and format metadata info = read.table(\"https://www.ebi.ac.uk/arrayexpress/files/E-GEUV-1/E-GEUV-1.sdrf.txt\", header=TRUE, sep=\"\\t\") colnames(info) = gsub(\"Comment\\\\.\", \"\", colnames(info)) colnames(info) = gsub(\"Characteristics\\\\.\", \"\", colnames(info)) colnames(info) = gsub(\"\\\\.$\", \"\", colnames(info))  # extract unique samples and drop a problematic sample info = unique(info[,!colnames(info) %in% c('Scan.Name', 'SUBMITTED_FILE_NAME', 'FASTQ_URI')]) info = info[info$ENA_RUN != 'ERR188328',]  # merge sample information in colData(rse) and info metadata = merge(colData(rse), info, by.x=\"run\", by.y='ENA_RUN') metadata = data.frame(metadata) rownames(metadata) = metadata$run  # keep RNA-seq samples in metadata geneCounts = geneCounts[,colnames(geneCounts) %in% metadata$run] geneCounts = geneCounts[,match(metadata$run, colnames(geneCounts))]"},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"rna-seq-processing","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"RNA-seq processing","title":"Zenith gene set testing after dream analysis","text":"","code":"# keep only expressed genes isexpr = rowSums(cpm(geneCounts)>1) >= 0.2*ncol(geneCounts)  # apply TMM normalization dge = DGEList( geneCounts[isexpr,] ) dge = calcNormFactors(dge)  # Create log2 counts per million for plotting geneExpr = cpm(dge, log=TRUE)  # extract gene annotations geneInfo = data.frame(rowData(rse))"},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"confirm-sex-based-on-expression","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Confirm sex based on expression","title":"Zenith gene set testing after dream analysis","text":"Plot expression XIST UTY see clear separation sex based XIST chrX UTY chrY.","code":"# extract ENSEMBL identifies for XIST and UTY ens_XIST = geneInfo$gene_id[which(geneInfo$symbol == \"XIST\")] ens_UTY = geneInfo$gene_id[which(geneInfo$symbol == \"UTY\")]  df = data.frame(metadata, XIST= geneExpr[ens_XIST,],         UTY = geneExpr[ens_UTY,])  ggplot(df, aes(XIST, UTY, color=sex)) + geom_point() + theme_bw() + theme(aspect.ratio=1) + scale_color_manual(values = c(\"red\", \"blue\"))"},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"differential-expression-with-dream","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Differential expression with dream","title":"Zenith gene set testing after dream analysis","text":"","code":"form = ~ sex + ancestry.category + laboratory vobj = voomWithDreamWeights(dge, form, metadata, plot=TRUE) fit = dream(vobj, form, metadata, computeResiduals=TRUE) fit = eBayes(fit)"},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"load-genesets","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Load genesets","title":"Zenith gene set testing after dream analysis","text":"","code":"# Load Gene Ontology database  go.gs = get_GeneOntology()     # convert from GeneSetCollection to list used by camera and zenith geneSets_GO = recodeToList( go.gs )"},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"zenith-gene-set-analysis","dir":"Articles","previous_headings":"","what":"Zenith gene set analysis","title":"Zenith gene set testing after dream analysis","text":"","code":"# Map from Ensembl genes in geneSets_GO to  # from trimmed Ensembl names from RNA-seq data  index = ids2indices( geneSets_GO, trim_ensembl_ids(rownames(fit)))     # filter by size of gene set n_genes_in = 10 index = index[sapply(index, length) >= n_genes_in]  # Run camera dsgn = model.matrix( form, metadata) res_camera = camera( vobj, index, dsgn, inter.gene.cor=NA, contrast=\"sexmale\")  # Run zenith.   # Note that zenith allows analysis of any dream model and  # any coefficient or contrast defined in the model.  # Setting inter.gene.cor=NA estimates the correlation from the model res_zenith = zenith( fit, \"sexmale\", index, inter.gene.cor=NA)"},{"path":[]},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"results-from-camera","dir":"Articles","previous_headings":"Zenith gene set analysis > Compare camera and zenith","what":"Results from camera","title":"Zenith gene set testing after dream analysis","text":"","code":"res_camera[1:8,] %>% kable %>% kable_styling(full_width = FALSE)"},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"results-from-zenith","dir":"Articles","previous_headings":"Zenith gene set analysis > Compare camera and zenith","what":"Results from zenith","title":"Zenith gene set testing after dream analysis","text":"slight difference results methods, attributable slight difference correlation value computed. appears due numerical issue camera, values correct two digits.","code":"res_zenith[1:8,] %>% kable %>% kable_styling(full_width = FALSE) df = merge(res_camera, res_zenith, by=\"row.names\") plot(df$Correlation.x, df$Correlation.y, xlab=\"Correlation from zenith\", ylab=\"Correlation from camera\") abline(0, 1, col=\"red\")"},{"path":[]},{"path":"http://gabrielhoffman.github.io/zenith/articles/geuvadis.html","id":"load-msigdb-and-perform-zenith-analysis","dir":"Articles","previous_headings":"Analysis with MSigDB","what":"Load MSigDB and perform zenith analysis","title":"Zenith gene set testing after dream analysis","text":"","code":"gs_msigdb = get_MSigDB()  # Map from Ensembl genes in gs_msigdb to  # from trimmed Ensembl names from RNA-seq data  index = ids2indices( recodeToList(gs_msigdb), trim_ensembl_ids(rownames(fit)))  # filter by size of gene set n_genes_in = 10 index = index[sapply(index, length) >= n_genes_in]   # zenith analysis of MSigDB using square test statistics res_zenith_msigdb = zenith( fit, \"sexmale\", index) res_zenith_msigdb[1:20,] %>% kable %>% kable_styling(full_width = FALSE)"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"load-and-process-rna-seq-data","dir":"Articles","previous_headings":"","what":"Load and process RNA-seq data","title":"Zenith gene set testing after dream analysis","text":"","code":"library(recount) library(variancePartition) library(edgeR) library(limma) library(zenith) library(ggplot2) library(EnrichmentBrowser) library(GSEABase) library(dplyr) library(kableExtra)  # For ENSEMBL id ENSG00000279457.4, return ENSG00000279457 trim_ensembl_ids = function(x){   gsub(\"(.*)\\\\.(.*)\", \"\\\\1\", x)  }"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"load-rna-seq-data-and-metadata","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Load RNA-seq data and metadata","title":"Zenith gene set testing after dream analysis","text":"","code":"# Download GEUVADIS data from recount2 if( ! file.exists(\"ERP001942/rse_gene.Rdata\") ){   download_study('ERP001942') }  # Load the data load(file.path('ERP001942', 'rse_gene.Rdata'))  # scale counts rse <- scale_counts(rse_gene)  # get count data geneCounts = assay(rse)  # read and format metadata info = read.table(\"https://www.ebi.ac.uk/arrayexpress/files/E-GEUV-1/E-GEUV-1.sdrf.txt\", header=TRUE, sep=\"\\t\") colnames(info) = gsub(\"Comment\\\\.\", \"\", colnames(info)) colnames(info) = gsub(\"Characteristics\\\\.\", \"\", colnames(info)) colnames(info) = gsub(\"\\\\.$\", \"\", colnames(info))  # extract unique samples and drop a problematic sample info = unique(info[,!colnames(info) %in% c('Scan.Name', 'SUBMITTED_FILE_NAME', 'FASTQ_URI')]) info = info[info$ENA_RUN != 'ERR188328',]  # merge sample information in colData(rse) and info metadata = merge(colData(rse), info, by.x=\"run\", by.y='ENA_RUN') metadata = data.frame(metadata) rownames(metadata) = metadata$run  # keep RNA-seq samples in metadata geneCounts = geneCounts[,colnames(geneCounts) %in% metadata$run] geneCounts = geneCounts[,match(metadata$run, colnames(geneCounts))]"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"rna-seq-processing","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"RNA-seq processing","title":"Zenith gene set testing after dream analysis","text":"","code":"# keep only expressed genes isexpr = rowSums(cpm(geneCounts)>1) >= 0.2*ncol(geneCounts)  # apply TMM normalization dge = DGEList( geneCounts[isexpr,] ) dge = calcNormFactors(dge)  # Create log2 counts per million for plotting geneExpr = cpm(dge, log=TRUE)  # extract gene annotations geneInfo = data.frame(rowData(rse))"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"confirm-sex-based-on-expression","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Confirm sex based on expression","title":"Zenith gene set testing after dream analysis","text":"Plot expression XIST UTY see clear separation sex based XIST chrX UTY chrY.","code":"# extract ENSEMBL identifies for XIST and UTY ens_XIST = geneInfo$gene_id[which(geneInfo$symbol == \"XIST\")] ens_UTY = geneInfo$gene_id[which(geneInfo$symbol == \"UTY\")]  df = data.frame(metadata, XIST= geneExpr[ens_XIST,],         UTY = geneExpr[ens_UTY,])  ggplot(df, aes(XIST, UTY, color=sex)) + geom_point() + theme_bw() + theme(aspect.ratio=1) + scale_color_manual(values = c(\"red\", \"blue\"))"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"differential-expression-with-dream","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Differential expression with dream","title":"Zenith gene set testing after dream analysis","text":"","code":"form = ~ sex + ancestry.category + laboratory vobj = voomWithDreamWeights(dge, form, metadata, plot=TRUE) fit = dream(vobj, form, metadata, computeResiduals=TRUE) fit = eBayes(fit)"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"load-genesets","dir":"Articles","previous_headings":"Load and process RNA-seq data","what":"Load genesets","title":"Zenith gene set testing after dream analysis","text":"","code":"# Load Gene Ontology database  go.gs = get_GeneOntology()     # convert from GeneSetCollection to list used by camera and zenith geneSets_GO = recodeToList( go.gs )"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"zenith-gene-set-analysis","dir":"Articles","previous_headings":"","what":"Zenith gene set analysis","title":"Zenith gene set testing after dream analysis","text":"","code":"# Map from Ensembl genes in geneSets_GO to  # from trimmed Ensembl names from RNA-seq data  index = ids2indices( geneSets_GO, trim_ensembl_ids(rownames(fit)))     # filter by size of gene set n_genes_in = 10 index = index[sapply(index, length) >= n_genes_in]  # Run camera dsgn = model.matrix( form, metadata) res_camera = camera( vobj, index, dsgn, inter.gene.cor=NA, contrast=\"sexmale\")  # Run zenith.   # Note that zenith allows analysis of any dream model and  # any coefficient or contrast defined in the model.  # Setting inter.gene.cor=NA estimates the correlation from the model res_zenith = zenith( fit, \"sexmale\", index, inter.gene.cor=NA)"},{"path":[]},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"results-from-camera","dir":"Articles","previous_headings":"Zenith gene set analysis > Compare camera and zenith","what":"Results from camera","title":"Zenith gene set testing after dream analysis","text":"","code":"res_camera[1:8,] %>% kable %>% kable_styling(full_width = FALSE)"},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"results-from-zenith","dir":"Articles","previous_headings":"Zenith gene set analysis > Compare camera and zenith","what":"Results from zenith","title":"Zenith gene set testing after dream analysis","text":"slight difference results methods, attributable slight difference correlation value computed. appears due numerical issue camera, values correct two digits.","code":"res_zenith[1:8,] %>% kable %>% kable_styling(full_width = FALSE) df = merge(res_camera, res_zenith, by=\"row.names\") plot(df$Correlation.x, df$Correlation.y, xlab=\"Correlation from zenith\", ylab=\"Correlation from camera\") abline(0, 1, col=\"red\")"},{"path":[]},{"path":"http://gabrielhoffman.github.io/zenith/articles/zenith.html","id":"load-msigdb-and-perform-zenith-analysis","dir":"Articles","previous_headings":"Analysis with MSigDB","what":"Load MSigDB and perform zenith analysis","title":"Zenith gene set testing after dream analysis","text":"","code":"gs_msigdb = get_MSigDB()  # Map from Ensembl genes in gs_msigdb to  # from trimmed Ensembl names from RNA-seq data  index = ids2indices( recodeToList(gs_msigdb), trim_ensembl_ids(rownames(fit)))  # filter by size of gene set n_genes_in = 10 index = index[sapply(index, length) >= n_genes_in]   # zenith analysis of MSigDB using square test statistics res_zenith_msigdb = zenith( fit, \"sexmale\", index) res_zenith_msigdb[1:20,] %>% kable %>% kable_styling(full_width = FALSE)"},{"path":"http://gabrielhoffman.github.io/zenith/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://gabrielhoffman.github.io/zenith/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman G (2022). zenith: Gene set analysis following differential expression using linear (mixed) modeling dream. R package version 1.0.8, https://DiseaseNeuroGenomics.github.io/zenith.","code":"@Manual{,   title = {zenith: Gene set analysis following differential expression using linear (mixed) modeling with dream},   author = {Gabriel Hoffman},   year = {2022},   note = {R package version 1.0.8},   url = {https://DiseaseNeuroGenomics.github.io/zenith}, }"},{"path":"http://gabrielhoffman.github.io/zenith/index.html","id":"zenith","dir":"","previous_headings":"","what":"Gene set analysis following differential expression using linear (mixed) modeling with dream","title":"Gene set analysis following differential expression using linear (mixed) modeling with dream","text":"Perform gene set analysis result differential expression using linear (mixed) modeling dream considering correlation gene expression traits. package implements camera method limma package proposed Wu Smyth (2012). zenith() simple extension limma::camera() compatible linear mixed models implemented variancePartition::dream().","code":""},{"path":"http://gabrielhoffman.github.io/zenith/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Gene set analysis following differential expression using linear (mixed) modeling with dream","text":"","code":"# Install package and dependencies devtools::install_github(\"DiseaseNeuroGenomics/zenith\")"},{"path":"http://gabrielhoffman.github.io/zenith/index.html","id":"dependencies","dir":"","previous_headings":"Install","what":"Dependencies","title":"Gene set analysis following differential expression using linear (mixed) modeling with dream","text":"case code aboves doesn’t install automatically","code":"devtools::install_github(\"lgeistlinger/EnrichmentBrowser\") devtools::install_github(\"DiseaseNeuroGenomics/variancePartition\")"},{"path":"http://gabrielhoffman.github.io/zenith/index.html","id":"supported-gene-set-databases","dir":"","previous_headings":"","what":"Supported gene set databases","title":"Gene set analysis following differential expression using linear (mixed) modeling with dream","text":"EnrichmentBrowser provides access range gene set databases. shortcuts load common databases: detailed control including alternate gene identifiers (.e. ENSEMBL, ENTREZ) species (.e. hsa, mmu) April 1, 2022","code":"library(zenith)  # MSigDB gs.msigdb = get_MSigDB()  # Gene Ontology gs.go = get_GeneOntology() library(EnrichmentBrowser)  # KEGG gs.kegg = getGenesets(  org = \"hsa\",                          db = \"kegg\",                          gene.id.type = \"ENSEMBL\",                          return.type = \"GeneSetCollection\")  ## ENRICHR resource df = showAvailableCollections( org = \"hsa\", db = \"enrichr\")  # Allen_Brain_Atlas_10x_scRNA_2021 gs.allen = getGenesets(  org = \"hsa\",                          db = \"enrichr\",                          lib = \"Allen_Brain_Atlas_10x_scRNA_2021\",                         gene.id.type = \"ENSEMBL\",                          return.type = \"GeneSetCollection\")"},{"path":"http://gabrielhoffman.github.io/zenith/reference/aggregate_GO_offspring.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate GO offspring genesets and genes — aggregate_GO_offspring","title":"Aggregate GO offspring genesets and genes — aggregate_GO_offspring","text":"Follow GO hierarchy include genes offspring sets given gene set","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/aggregate_GO_offspring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate GO offspring genesets and genes — aggregate_GO_offspring","text":"","code":"aggregate_GO_offspring(gs.GO)"},{"path":"http://gabrielhoffman.github.io/zenith/reference/aggregate_GO_offspring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate GO offspring genesets and genes — aggregate_GO_offspring","text":"gs.GO GeneSetCollection getGenesets()","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/aggregate_GO_offspring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate GO offspring genesets and genes — aggregate_GO_offspring","text":"GeneSetCollection aggregated gene sets","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/corInGeneSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate mean correlation between residuals in gene set — corInGeneSet","title":"Evaluate mean correlation between residuals in gene set — corInGeneSet","text":"Evaluate mean correlation residuals gene set based results dream","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/corInGeneSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate mean correlation between residuals in gene set — corInGeneSet","text":"","code":"corInGeneSet(fit, idx, squareCorr = FALSE)"},{"path":"http://gabrielhoffman.github.io/zenith/reference/corInGeneSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate mean correlation between residuals in gene set — corInGeneSet","text":"fit result differential expression dream idx indeces rownames extract squareCorr compute mean squared correlation instead","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/dot-rankSumTestWithCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"Two Sample Wilcoxon-Mann-Whitney Rank Sum Test Allowing For Correlation — .rankSumTestWithCorrelation","title":"Two Sample Wilcoxon-Mann-Whitney Rank Sum Test Allowing For Correlation — .rankSumTestWithCorrelation","text":"limma::.rankSumTestWithCorrelation, returns effect size.","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/dot-rankSumTestWithCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two Sample Wilcoxon-Mann-Whitney Rank Sum Test Allowing For Correlation — .rankSumTestWithCorrelation","text":"","code":".rankSumTestWithCorrelation(index, statistics, correlation = 0, df = Inf)"},{"path":"http://gabrielhoffman.github.io/zenith/reference/dot-rankSumTestWithCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two Sample Wilcoxon-Mann-Whitney Rank Sum Test Allowing For Correlation — .rankSumTestWithCorrelation","text":"index index vector statistics[index] contains values statistic test group. statistics numeric vector giving values test statistic. correlation numeric scalar, average correlation cases test group.  Cases second group assumed independent first group. df degrees freedom correlation estimated.","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/dot-rankSumTestWithCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two Sample Wilcoxon-Mann-Whitney Rank Sum Test Allowing For Correlation — .rankSumTestWithCorrelation","text":"data.frame storing results hypothesis test","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/dot-rankSumTestWithCorrelation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two Sample Wilcoxon-Mann-Whitney Rank Sum Test Allowing For Correlation — .rankSumTestWithCorrelation","text":"See limma::.rankSumTestWithCorrelation","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_GeneOntology.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Gene Ontology genesets — get_GeneOntology","title":"Load Gene Ontology genesets — get_GeneOntology","text":"Load Gene Ontology genesets","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_GeneOntology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Gene Ontology genesets — get_GeneOntology","text":"","code":"get_GeneOntology(   onto = c(\"BP\", \"MF\", \"CC\"),   to = \"ENSEMBL\",   includeOffspring = TRUE )"},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_GeneOntology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Gene Ontology genesets — get_GeneOntology","text":"onto array categories load convert gene names type using EnrichmentBrowser::idMap().  See EnrichmentBrowser::idTypes(org=\"hsa\") valid types includeOffspring TRUE, follow GO hierarchy include genes offspring sets given gene set","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_GeneOntology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Gene Ontology genesets — get_GeneOntology","text":"Gene sets stored GeneSetCollection","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_GeneOntology.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Gene Ontology genesets — get_GeneOntology","text":"function loads GO gene sets using packages EnrichmentBrowser GO.db  can take mintute load converting gene name type slow.","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_GeneOntology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Gene Ontology genesets — get_GeneOntology","text":"","code":"# load GO Biological Process gs = get_GeneOntology('BP') #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:parallel’: #>  #>     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, #>     clusterExport, clusterMap, parApply, parCapply, parLapply, #>     parLapplyLB, parRapply, parSapply, parSapplyLB #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #>  #>   # load all gene sets # gs = get_GeneOntology()"},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_MSigDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Load MSigDB genesets — get_MSigDB","title":"Load MSigDB genesets — get_MSigDB","text":"Load MSigDB genesets","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_MSigDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load MSigDB genesets — get_MSigDB","text":"","code":"get_MSigDB(cat = unique(msigdbr_collections()$gs_cat), to = \"ENSEMBL\")"},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_MSigDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load MSigDB genesets — get_MSigDB","text":"cat array categories load.  Defaults array MSigDB categories convert gene names type using EnrichmentBrowser::idMap().  See EnrichmentBrowser::idTypes(org=\"hsa\") valid types","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_MSigDB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load MSigDB genesets — get_MSigDB","text":"Gene sets stored GeneSetCollection","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_MSigDB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load MSigDB genesets — get_MSigDB","text":"function loads MSigDB gene sets using packages EnrichmentBrowser msigdbr.  can take mintute load converting gene name type slow.","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/get_MSigDB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load MSigDB genesets — get_MSigDB","text":"","code":"# load Hallmark gene sets gs = get_MSigDB('H')  # load all gene sets # gs = get_MSigDB()"},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList-GeneSetCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode GeneSetCollection to list used by limma — recodeToList,GeneSetCollection-method","title":"Recode GeneSetCollection to list used by limma — recodeToList,GeneSetCollection-method","text":"Recode GeneSetCollection list used limma","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList-GeneSetCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode GeneSetCollection to list used by limma — recodeToList,GeneSetCollection-method","text":"","code":"# S4 method for GeneSetCollection recodeToList(gsc)"},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList-GeneSetCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode GeneSetCollection to list used by limma — recodeToList,GeneSetCollection-method","text":"gsc GeneSetCollection object","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode GeneSetCollection to list used by limma — recodeToList","title":"Recode GeneSetCollection to list used by limma — recodeToList","text":"Recode GeneSetCollection list used limma","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode GeneSetCollection to list used by limma — recodeToList","text":"","code":"recodeToList(gsc)"},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode GeneSetCollection to list used by limma — recodeToList","text":"gsc GeneSetCollection object","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode GeneSetCollection to list used by limma — recodeToList","text":"list storing data GeneSetCollection","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/recodeToList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode GeneSetCollection to list used by limma — recodeToList","text":"","code":"# load Hallmark gene sets gs = get_MSigDB('H')  # recode GeneSetCollection as a list gs.list = recodeToList(gs)"},{"path":"http://gabrielhoffman.github.io/zenith/reference/zenith.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene set analysis following differential expression with dream — zenith","title":"Gene set analysis following differential expression with dream — zenith","text":"Perform gene set analysis result differential expression using linear (mixed) modeling variancePartition::dream considering correlation gene expression traits.  package slight modification limma::camera 1) compatible dream, 2) allow identification gene sets log fold changes mixed sign.","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/zenith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene set analysis following differential expression with dream — zenith","text":"","code":"zenith(   fit,   coef,   index,   use.ranks = FALSE,   allow.neg.cor = FALSE,   progressbar = TRUE,   inter.gene.cor = 0.01 )"},{"path":"http://gabrielhoffman.github.io/zenith/reference/zenith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene set analysis following differential expression with dream — zenith","text":"fit result differential expression dream coef coefficient test using topTable(fit, coef) index index vector list index vectors.  Can vector fit[index,] selects rows corresponding test set.  list can made using ids2indices. use.ranks rank-based test (TRUE) parametric test ('FALSE')? allow.neg.cor reduced variance inflation factors allowed negative correlations? progressbar TRUE, show progress bar inter.gene.cor NA, estimate correlation data.  Otherwise, use specified value","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/zenith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene set analysis following differential expression with dream — zenith","text":"NGenes: number genes set Correlation: mean correlation expression genes set delta: difference mean t-statistic genes set compared genes set se: standard error delta p.less: p-value hypothesis test H0: delta < 0 p.greater: p-value hypothesis test H0: delta > 0 PValue:  p-value hypothesis test H0: delta != 0 Direction: direction effect based sign(delta) FDR: false discovery rate based Benjamini-Hochberg method p.adjust","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/zenith.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene set analysis following differential expression with dream — zenith","text":"zenith gives results camera(..., inter.gene.cor=NA) estimates correlation gene set. differential expression dream using linear (mixed) models see Hoffman Roussos (2020).  original camera gene set test see Wu Smyth (2012).","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/zenith.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gene set analysis following differential expression with dream — zenith","text":"Hoffman GE, Roussos P (2020). “dream: Powerful differential expression analysis repeated measures designs.” Bioinformatics. doi: 10.1093/bioinformatics/btaa687 .  Wu D, Smyth GK (2012). “Camera: competitive gene set test accounting inter-gene correlation.” Nucleic acids research, 40(17), e133. doi: 10.1093/nar/gks461 .","code":""},{"path":"http://gabrielhoffman.github.io/zenith/reference/zenith.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene set analysis following differential expression with dream — zenith","text":"","code":"library(variancePartition) #> Loading required package: ggplot2 #> Loading required package: limma #>  #> Attaching package: ‘limma’ #> The following object is masked from ‘package:BiocGenerics’: #>  #>     plotMA #> Loading required package: BiocParallel  # simulate meta-data info <- data.frame(Age=c(20, 31, 52, 35, 43, 45),Group=c(0,0,0,1,1,1))  # simulate expression data y <- matrix(rnorm(1000*6),1000,6) rownames(y) = paste0(\"gene\", 1:1000) colnames(y) = rownames(info)  # First set of 20 genes are genuinely differentially expressed index1 <- 1:20 y[index1,4:6] <- y[index1,4:6]+1  # Second set of 20 genes are not DE index2 <- 21:40  # perform differential expression analysis with dream fit = dream(y, ~ Age + (1|Group), info) #> Dividing work into 50 chunks... #>  #> Total:118 s  # perform gene set analysis testing Age res = zenith(fit, \"Age\", list(set1=index1,set2=index2) )  head(res) #>      NGenes Correlation      delta        se     p.less p.greater    PValue #> set2     20        0.01 -0.4492972 0.2434104 0.06963349 0.9303665 0.1392670 #> set1     20        0.01  0.0485832 0.2438970 0.57404777 0.4259522 0.8519045 #>      Direction       FDR #> set2      Down 0.2785339 #> set1        Up 0.8519045"}]
